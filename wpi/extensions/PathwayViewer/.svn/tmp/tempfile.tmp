/**
 * JS code to hook into mediawiki divs already in place to 
 * generate main pathway image, along with log in, edit, 
 * and download controls. This code does everything right 
 * up to the point where pvjs is integrated, including the
 * creation of the pwImage_pvjs div that pvjs targets.
 */ 

// mater variable for height of pvjs viewer container divs
var viewer_height = '500px';
var viewer_width = '100%';
var viewer_min_width = '700px';
var viewer_max_width = '900px';

/**
 *  When page is ready:
 *   1. Grab pwImage div; clean up <a>; remove <img>
 *   2. Prepare new divs inside thumbinner
 *   3. Animate window, if supported 
 *   4. Add final div for pvjs
 */
$(window).ready(function() {

	var img = $('#pwImage');
	if (typeof img.get(0) != 'undefined'){ //i.e., skip for PathwayWidget cases
	  if (img.get(0).nodeName.toLowerCase()!= 'img') {
		img = $('#pwImage img');
	  }
	}
	if (img.parent().is('a')){
		var oldParent=img.parent();
		var newParent=oldParent.parent();
		oldParent.after(img);
		oldParent.remove();
	}
	var container = $('<div />')
		.attr('id', 'pwImage_container')
		.css({	width: viewer_width, 
			'min-width': viewer_min_width, 
			'max-width': viewer_max_width, 
			height: viewer_height, 
			margin:'0 0 0 0' 
		}); 
	var parent = img.parent();
	img.after(container);
	img.remove();

        //Make room for the login/edit/download buttons at the bottom
        parent.css({
                padding: '3px 6px 30px 3px' 
        });     

<<<<<<< .mine
	var $parent = $img.parent();
	$img.after($container);
	$img.remove();

	//Create the layout pane
	var $layout = $('<div/>')
	.attr('id', this.info.imageId + PathwayViewer.idLayout).css({
		width: '100%',
		height: '100%'
	});
	this.$viewer = $('<div/>').addClass('ui-layout-center').css({
		border: '1px solid #BBBBBB',
		'background-color': '#FFFFFF'
	});
	var $xrefpane = $('<div/>').addClass('ui-layout-east');
	$layout.append(this.$viewer);
	$layout.append($xrefpane);

	var afterAnimate = function() {
		//Apply the layout
		$container.append($layout);
		var east_width = 300;
		if(east_width > $container.width() * 0.5) {
			east_width = $container.width() * 0.5; //Cover half of the viewer max
		}
		var layoutUtil = $layout.layout({
			applyDefaultStyles: true,
			center__applyDefaultStyles: false,
			east__size: east_width
		});
		layoutUtil.close('east');

		that.$viewer.css({
			overflow: 'hidden',
			'background-color': '#F9F9F9'
		});
		//COMMENTING OUT NEXT LINE TO FIX LOAD ISSUE (not sure why this fix works)
		//that.showLoadProgress($layout);

		//Add the SVG object to the center panel
		var obj_id = that.info.imageId + PathwayViewer.idSvgObject;

		if(PathwayViewer.useFlash()) {
			var obj = document.createElement('object', true);
			obj.id = obj_id;
			obj.setAttribute('type', 'image/svg+xml');
			obj.setAttribute('data', that.info.svgUrl);

			//Ideally we would use relative size here ('100%'), but this causes the
			//SVG to stretch on resizing the parent
			obj.setAttribute('width', screen.width + 'px');
			obj.setAttribute('height', screen.height + 'px');
			//obj.setAttribute('width', that.$viewer.width() + 'px');
			//obj.setAttribute('height', that.$viewer.height() + 'px');
			obj.addEventListener('SVGLoad', function() {
				that.$svgObject = $('#' + that.info.imageId + PathwayViewer.idSvgObject);
				that.svgRoot = that.$svgObject.get(0).contentDocument.rootElement;
				that.svgLoaded($xrefpane, layoutUtil);
				//Remove progress when loaded
				that.hideLoadProgress($layout);
			}, false);

			svgweb.appendChild(obj, that.$viewer.get(0));
		} else {
			//Add <svg> tag for HTML5 compliant browsers
			var $svgDiv = $('<div id="' + obj_id + '"/>');
			$svgDiv.width('100%');
			$svgDiv.height('100%');

			that.$viewer.append($svgDiv);

			$.ajax({
				url: that.info.svgUrl,
				dataType: 'text',
				success: function(txt) {
					$svgDiv.html(txt);
					that.$svgObject = $svgDiv;
					that.svgRoot = $svgDiv.children("svg").get(0);
					that.svgLoaded($xrefpane, layoutUtil);
					that.hideLoadProgress($layout);
				}
			});
		}
	};
	//Change the size of the image parent
	if ($.browser.msie) { //Animate gives problems in IE, just change style directly
		$parent.css({
		width: '100%',
		height: 'auto'
		});
		afterAnimate();
	} else { //Animate for smooth transition
		$parent.animate({
			width: '100%',
			height: 'auto'
		}, 300, afterAnimate);
	}
};

PathwayViewer.isIE9 = function() {
	return $.browser.msie && $.browser.version.slice(0,1) == 9;
};

PathwayViewer.useFlash = function() {
	//Use flash unless browser is IE9 (use <svg> tag in that case)
	return !PathwayViewer.isIE9();
};

PathwayViewer.prototype.removeImgAnchor = function($img) {
	//If the img tag is nested in an anchor tag,
	//remove it
	if ($img.parent().is('a')) {
		var $oldParent = $img.parent();
		var $newParent = $oldParent.parent();
		$oldParent.after($img);
		$oldParent.remove();
	}
};

// Flash version detection copied from https://github.com/jquerytools/jquerytools/issues/133
PathwayViewer.prototype.isFlashSupported = function() {
    function isBrowserBlacklisted() {
        if(navigator.userAgent.indexOf("Epiphany") > 0)
            return true;
        else
            return false;
    }

    function getFlashVersion() {
        var ver = "";
        try {
            ver = navigator.plugins["Shockwave Flash"].description.slice(16);
        } catch(e) {
            try  {
                var fo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7");
                ver = fo && fo.GetVariable("$version");
            } catch(err) {
                try  {
                    var fo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6");
                    ver = fo && fo.GetVariable("$version");
                } catch(err) {
                }
            }
=======
        if (ie) { //Animate gives problems in IE, just change style directly
                parent.css({
                	width: viewer_width,
                	'min-width': viewer_min_width, 
                        'max-width': viewer_max_width, 
                        height: viewer_height
                });
                afterAnimate(container);
        } else { //Animate for smooth transition
                parent.animate({
                        width: viewer_width,
			'min-width': viewer_min_width, 
                        'max-width': viewer_max_width, 
                        height: viewer_height
                }, 300, afterAnimate(container));
>>>>>>> .r1808
        }

}); 

/**
 * Adds the final div and the future home of the pvjs code.
 */
var afterAnimate = function(c) {
        var pvjs = $('<div/>')
                .attr('id','pwImage_pvjs')
                .css({	width: viewer_width,
			'min-width': viewer_min_width, 
                        'max-width': viewer_max_width, 
                        height: viewer_height
		});
        c.append(pvjs);
};

/** 
 * A short snippet for detecting versions of IE in JavaScript
 * without resorting to user-agent sniffing
 * 
 * If you're not in IE (or IE version is less than 5) then:
 *     ie === undefined
 * If you're in IE (>=5) then you can determine which version:
 *     ie === 7;  // IE7
 * Thus, to detect IE:
 *     if (ie) {}
 * And to detect the version:
 *     ie === 6  // IE6
 *     ie > 7  // IE8, IE9 ...
 *     ie < 9 // Anything less than IE9
 */

var ie = (function(){

    var undef,
        v = 3,
        div = document.createElement('div'),
        all = div.getElementsByTagName('i');

    while (
        div.innerHTML = '<!--[if gt IE ' + (++v) + ']><i></i><![endif]-->',
        all[0]
    );

    return v > 4 ? v : undef;

}());
